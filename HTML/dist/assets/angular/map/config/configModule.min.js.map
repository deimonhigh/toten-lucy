{"version":3,"sources":["config/Dependencias/loadingInterceptor.js","config/Dependencias/interceptorsConfig.js","config/Dependencias/autenticacaoInterceptor.js","config/Dependencias/configValue.js","config/Dependencias/qSerial.js"],"names":["loadingInterceptor","$q","$rootScope","loadingCount","request","config","$broadcast","when","response","responseError","reject","module","factory","$inject","angular","localStorageService","base64Factory","$location","requisicao","storage","get","url","indexOf","autorizacaoDados","JSON","parse","decode","headers","access_token","e","$httpProvider","interceptors","push","constant","baseUrl","apiToken","apiUrl","grant_type","client_id","client_secret","scope","$provide","decorator","$delegate","serial","tasks","prevPromise","error","Error","forEach","task","key","nextPromise","success","fail","notify","then","data","ret","isPromiseLike","message","reason","obj","isFunction","routeFn","$stateProvider","$urlRouterProvider","localStorageServiceProvider","cfpLoadingBarProvider","includeSpinner","setPrefix","setStorageType","otherwise","state","templateUrl","controller"],"mappings":"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","file":"../../config/configModule.min.js","sourcesContent":["angular\r\n  .module(\"appToten\")\r\n  .factory(\"loadingInterceptor\", loadingInterceptor);\r\n\r\nloadingInterceptor.$inject = ['$q', '$rootScope'];\r\n\r\nfunction loadingInterceptor($q, $rootScope) {\r\n  var loadingCount = 0;\r\n  return {\r\n    request: function (config) {\r\n      if (++loadingCount === 1) $rootScope.$broadcast('loading:progress');\r\n      return config || $q.when(config);\r\n    },\r\n\r\n    response: function (response) {\r\n      if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');\r\n      return response || $q.when(response);\r\n    },\r\n\r\n    responseError: function (response) {\r\n      if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');\r\n      return $q.reject(response);\r\n    }\r\n  };\r\n};","\r\n//=require loadingInterceptor.js\r\n//=require autenticacaoInterceptor.js\r\n\r\n(function (angular) {\r\n  angular\r\n    .module(\"appToten\")\r\n    .config([\r\n              '$httpProvider',\r\n              function ($httpProvider) {\r\n                $httpProvider.interceptors.push(\"autenticacaoInterceptor\");\r\n                $httpProvider.interceptors.push(\"loadingInterceptor\");\r\n              }\r\n            ]);\r\n})(angular);\r\n\r\n","angular\r\n  .module(\"appToten\")\r\n  .factory(\"autenticacaoInterceptor\", [\r\n    'localStorageService', 'config', 'base64Factory', '$location', function (localStorageService, config, base64Factory, $location) {\r\n      return {\r\n        request: function (requisicao) {\r\n\r\n          try {\r\n            var storage = localStorageService.get('auth');\r\n\r\n            if (\r\n              storage == null || requisicao.url.indexOf('.html') > -1\r\n            ) {\r\n              throw \"Invalid\"\r\n            }\r\n\r\n            var autorizacaoDados = JSON.parse(base64Factory.decode(storage));\r\n\r\n            if (autorizacaoDados) {\r\n              if (requisicao.url.indexOf(\"api\") > -1 && requisicao.url.indexOf('oauth') == -1) {\r\n                requisicao.headers[\"Authorization\"] = \"Bearer \" + autorizacaoDados.access_token;\r\n              }\r\n            }\r\n\r\n            return requisicao;\r\n          }\r\n          catch (e) {\r\n            if (requisicao.url.indexOf(\"apigopharma\") == -1) {\r\n              return requisicao;\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  ]);","angular\r\n  .module(\"appToten\")\r\n  .constant(\"config\", {\r\n    \"baseUrl\": \"http://localhost:8000/\",\r\n    \"apiToken\": \"http://localhost:8000/oauth/token\",\r\n    \"apiUrl\": \"http://localhost:8000/api/\",\r\n    \"grant_type\": \"password\",\r\n    \"client_id\": 3,\r\n    \"client_secret\": \"N8bENBm0tCa2KToFezvaL2Ms8zNw2XNh00VU0fJG\",\r\n    \"scope\": \"*\"\r\n  });\r\n","angular\r\n  .module(\"appToten\")\r\n  .config([\r\n            \"$provide\",\r\n            function ($provide) {\r\n              $provide.decorator(\"$q\",\r\n                                 [\r\n                                   \"$delegate\",\r\n                                   function ($delegate) {\r\n                                     //Helper method copied from q.js.\r\n                                     var isPromiseLike = function (obj) { return obj && angular.isFunction(obj.then); }\r\n\r\n                                     /*\r\n                                      * @description Execute a collection of tasks serially.  A task is a function that returns a promise\r\n                                      *\r\n                                      * @param {Array.<Function>|Object.<Function>} tasks An array or hash of tasks.  A tasks is a function\r\n                                      *   that returns a promise.  You can also provide a collection of objects with a success tasks, failure task, and/or notify function\r\n                                      * @returns {Promise} Returns a single promise that will be resolved or rejected when the last task\r\n                                      *   has been resolved or rejected.\r\n                                      */\r\n                                     function serial(tasks) {\r\n                                       //Fake a \"previous task\" for our initial iteration\r\n                                       var prevPromise;\r\n                                       var error = new Error();\r\n                                       angular.forEach(tasks, function (task, key) {\r\n                                         var success = task.success || task;\r\n                                         var fail = task.fail;\r\n                                         var notify = task.notify;\r\n                                         var nextPromise;\r\n\r\n                                         //First task\r\n                                         if (!prevPromise) {\r\n                                           nextPromise = success();\r\n                                           if (!isPromiseLike(nextPromise)) {\r\n                                             error.message = \"Task \" + key + \" did not return a promise.\";\r\n                                             throw error;\r\n                                           }\r\n                                         } else {\r\n                                           //Wait until the previous promise has resolved or rejected to execute the next task\r\n                                           nextPromise = prevPromise.then(\r\n                                             /*success*/function (data) {\r\n                                               if (!success) { return data; }\r\n                                               var ret = success(data);\r\n                                               if (!isPromiseLike(ret)) {\r\n                                                 error.message = \"Task \" + key + \" did not return a promise.\";\r\n                                                 throw error;\r\n                                               }\r\n                                               return ret;\r\n                                             },\r\n                                             /*failure*/function (reason) {\r\n                                               if (!fail) { return $delegate.reject(reason); }\r\n                                               var ret = fail(reason);\r\n                                               if (!isPromiseLike(ret)) {\r\n                                                 error.message = \"Fail for task \" + key + \" did not return a promise.\";\r\n                                                 throw error;\r\n                                               }\r\n                                               return ret;\r\n                                             },\r\n                                             notify);\r\n                                         }\r\n                                         prevPromise = nextPromise;\r\n                                       });\r\n\r\n                                       return prevPromise || $delegate.when();\r\n                                     }\r\n\r\n                                     $delegate.serial = serial;\r\n                                     return $delegate;\r\n                                   }\r\n                                 ]);\r\n            }\r\n          ]);"]}