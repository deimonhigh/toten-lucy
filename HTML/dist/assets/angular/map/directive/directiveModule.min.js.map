{"version":3,"sources":["directive/Directives/cpfDirective.js"],"names":["angular","cpf","$timeout","chooseValidation","value","length","validarCPF","validarCNPJ","setCaretPosition","el","selectionStart","selectionEnd","createTextRange","focus","range","collapse","select","chooseFormatter","toString","formatterCPF","formatterCNPJ","cnpj","replace","tamanho","numeros","substring","digitos","soma","pos","i","charAt","resultado","rev","add","parseInt","restrict","require","scope","ngModel","link","element","attrs","ngModelCtrl","$setValidity","$formatters","push","$parsers","transformedInput","$setViewValue","$render","$viewValue","module","directive","$inject","telefone","formatterDefault","formatterNoDdd","formatterGeral","maskTelefone","len","indexOf","substr","cep","formatter"],"mappings":"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","file":"../../directive/directiveModule.min.js","sourcesContent":["(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('cpf', cpf);\r\n\r\n  cpf.$inject = ['$timeout'];\r\n\r\n  function cpf($timeout) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      scope: {\r\n        ngModel: '=ngModel'\r\n      },\r\n      link: function (scope, element, attrs, ngModelCtrl) {\r\n        ngModelCtrl.$setValidity('cpf', true);\r\n\r\n        ngModelCtrl.$formatters.push(function (value) {\r\n          return chooseFormatter(value);\r\n        });\r\n\r\n        ngModelCtrl.$parsers.push(function (value) {\r\n          if (value) {\r\n            var transformedInput = value.toString().replace(/[^0-9]/g, '');\r\n            var tamanho = transformedInput.length <= 11 ? 11 : 14;\r\n            ngModelCtrl.$setViewValue(chooseFormatter(transformedInput.substring(0, tamanho)));\r\n            ngModelCtrl.$render();\r\n\r\n            $timeout(function () {\r\n              if (ngModelCtrl.$viewValue) {\r\n                setCaretPosition(element[0], ngModelCtrl.$viewValue.length);\r\n              }\r\n            });\r\n\r\n            return transformedInput;\r\n          }\r\n        });\r\n\r\n        ngModelCtrl.$parsers.push(function (value) {\r\n\r\n          if (value) {\r\n            var cond = chooseValidation(value.toString());\r\n            if (cond) {\r\n              ngModelCtrl.$setValidity('cpf', true);\r\n              return value;\r\n            } else {\r\n              ngModelCtrl.$setValidity('cpf', false);\r\n              return undefined;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    function chooseValidation(value) {\r\n      if (value) {\r\n        if (value.length <= 11) {\r\n          return validarCPF(value);\r\n        } else {\r\n          return validarCNPJ(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    function setCaretPosition(el) {\r\n      if (typeof el.selectionStart == \"number\") {\r\n        el.selectionStart = el.selectionEnd = el.value.length;\r\n      } else if (typeof el.createTextRange != \"undefined\") {\r\n        el.focus();\r\n        var range = el.createTextRange();\r\n        range.collapse(false);\r\n        range.select();\r\n      }\r\n    }\r\n\r\n    function chooseFormatter(value) {\r\n      if (value) {\r\n        value = value.toString();\r\n\r\n        if (value.length <= 11) {\r\n          return formatterCPF(value);\r\n        } else {\r\n          return formatterCNPJ(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    //region CNPJ\r\n    function validarCNPJ(cnpj) {\r\n      cnpj = cnpj.toString().replace(/[^\\d]+/g, '');\r\n\r\n      if (cnpj.length === 0) return false;\r\n\r\n      if (cnpj.length !== 14) {\r\n        return false;\r\n      }\r\n\r\n      // Elimina CNPJs invalidos conhecidos\r\n      if (cnpj === \"00000000000000\" ||\r\n          cnpj === \"11111111111111\" ||\r\n          cnpj === \"22222222222222\" ||\r\n          cnpj === \"33333333333333\" ||\r\n          cnpj === \"44444444444444\" ||\r\n          cnpj === \"55555555555555\" ||\r\n          cnpj === \"66666666666666\" ||\r\n          cnpj === \"77777777777777\" ||\r\n          cnpj === \"88888888888888\" ||\r\n          cnpj === \"99999999999999\") {\r\n        return false;\r\n      }\r\n\r\n      // Valida DVs\r\n      var tamanho = cnpj.length - 2;\r\n      var numeros = cnpj.substring(0, tamanho);\r\n      var digitos = cnpj.substring(tamanho);\r\n      var soma = 0;\r\n      var pos = tamanho - 7;\r\n      for (var i = tamanho; i >= 1; i--) {\r\n        soma += numeros.charAt(tamanho - i) * pos--;\r\n        if (pos < 2) {\r\n          pos = 9;\r\n        }\r\n      }\r\n      var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n      if (resultado !== digitos.charAt(0)) {\r\n        return false;\r\n      }\r\n\r\n      tamanho = tamanho + 1;\r\n      numeros = cnpj.substring(0, tamanho);\r\n      soma = 0;\r\n      pos = tamanho - 7;\r\n      for (i = tamanho; i >= 1; i--) {\r\n        soma += numeros.charAt(tamanho - i) * pos--;\r\n        if (pos < 2) {\r\n          pos = 9;\r\n        }\r\n      }\r\n      resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n      return resultado === digitos.charAt(1);\r\n    }\r\n\r\n    function formatterCNPJ(value) {\r\n      if (value) {\r\n        value = value.replace(/\\D/g, \"\");\r\n        value = value.replace(/^(\\d{2})(\\d)/, \"$1.$2\");\r\n        value = value.replace(/^(\\d{2})\\.(\\d{3})(\\d)/, \"$1.$2.$3\");\r\n        value = value.replace(/\\.(\\d{3})(\\d)/, \".$1/$2\");\r\n        value = value.replace(/(\\d{4})(\\d)/, \"$1-$2\");\r\n        return value;\r\n      }\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region CPF\r\n    function validarCPF(cpf) {\r\n      if (!cpf) {\r\n        return false;\r\n      }\r\n      cpf = cpf.toString().replace(/[^0-9]+/g, '');\r\n      if (cpf.length === 0) return false;\r\n      var rev;\r\n\r\n      // Elimina CPFs invalidos conhecidos\r\n      if (cpf.length !== 11 ||\r\n          cpf === \"00000000000\" ||\r\n          cpf === \"11111111111\" ||\r\n          cpf === \"22222222222\" ||\r\n          cpf === \"33333333333\" ||\r\n          cpf === \"44444444444\" ||\r\n          cpf === \"55555555555\" ||\r\n          cpf === \"66666666666\" ||\r\n          cpf === \"77777777777\" ||\r\n          cpf === \"88888888888\" ||\r\n          cpf === \"99999999999\") {\r\n        return false;\r\n      }\r\n      // Valida 1o digito\r\n      var add = 0;\r\n      for (var i = 0; i < 9; i++) {\r\n        add += parseInt(cpf.charAt(i)) * (10 - i);\r\n      }\r\n      rev = 11 - (add % 11);\r\n      if (rev === 10 || rev === 11) {\r\n        rev = 0;\r\n      }\r\n      if (rev !== parseInt(cpf.charAt(9))) {\r\n        return false;\r\n      }\r\n      // Valida 2o digito\r\n      add = 0;\r\n      for (var i = 0; i < 10; i++) {\r\n        add += parseInt(cpf.charAt(i)) * (11 - i);\r\n      }\r\n      rev = 11 - (add % 11);\r\n      if (rev === 10 || rev === 11) {\r\n        rev = 0;\r\n      }\r\n\r\n      return rev === parseInt(cpf.charAt(10));\r\n    }\r\n\r\n    function formatterCPF(value) {\r\n      if (value) {\r\n        value = value.replace(/[^0-9]/g, \"\");\r\n        value = value.replace(/(\\d{3})(\\d)/, \"$1.$2\");\r\n        value = value.replace(/(\\d{3})(\\d)/, \"$1.$2\");\r\n        value = value.replace(/(\\d{3})(\\d{1,2})$/, \"$1-$2\");\r\n\r\n        return value;\r\n      }\r\n    }\r\n\r\n    //endregion\r\n\r\n  }\r\n\r\n})(angular);\r\n"]}