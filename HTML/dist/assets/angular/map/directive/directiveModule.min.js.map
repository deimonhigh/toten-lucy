{"version":3,"sources":["directive/Directives/cpfDirective.js","directive/Directives/telefoneDirective.js"],"names":["angular","cpf","$timeout","setCaretPosition","el","selectionStart","selectionEnd","value","length","createTextRange","focus","range","collapse","select","validarCPF","replace","rev","add","i","parseInt","charAt","formatterCPF","restrict","require","scope","ngModel","link","element","attrs","ngModelCtrl","$setValidity","$formatters","push","$parsers","transformedInput","$setViewValue","substring","$render","$viewValue","toString","module","directive","$inject","telefone","formatterDefault","formatterNoDdd","formatterGeral","maskTelefone","len","indexOf","substr","cep","formatter"],"mappings":"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","file":"../../directive/directiveModule.min.js","sourcesContent":["(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('cpf', cpf);\r\n\r\n  cpf.$inject = ['$timeout'];\r\n\r\n  function cpf($timeout) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      scope: {\r\n        ngModel: '=ngModel'\r\n      },\r\n      link: function (scope, element, attrs, ngModelCtrl) {\r\n        ngModelCtrl.$setValidity('cpf', true);\r\n\r\n        ngModelCtrl.$formatters.push(function (value) {\r\n          return formatterCPF(value);\r\n        });\r\n\r\n        ngModelCtrl.$parsers.push(function (value) {\r\n          if (value) {\r\n            var transformedInput = value.replace(/[^0-9]/g, '');\r\n            ngModelCtrl.$setViewValue(formatterCPF(transformedInput.substring(0, 11)));\r\n            ngModelCtrl.$render();\r\n\r\n            $timeout(function () {\r\n              if (ngModelCtrl.$viewValue) {\r\n                setCaretPosition(element[0], ngModelCtrl.$viewValue.length);\r\n              }\r\n            });\r\n\r\n            return transformedInput;\r\n          }\r\n        });\r\n\r\n        ngModelCtrl.$parsers.push(function (value) {\r\n\r\n          if (value) {\r\n            var cond = validarCPF(value.toString());\r\n            if (cond) {\r\n              ngModelCtrl.$setValidity('cpf', true);\r\n              return value;\r\n            } else {\r\n              ngModelCtrl.$setValidity('cpf', false);\r\n              return value;\r\n            }\r\n          }\r\n        });\r\n\r\n        //$(element).mask('000.000.000-00', {reverse: true});\r\n      }\r\n    };\r\n\r\n    function setCaretPosition(el) {\r\n      if (typeof el.selectionStart == \"number\") {\r\n        el.selectionStart = el.selectionEnd = el.value.length;\r\n      } else if (typeof el.createTextRange != \"undefined\") {\r\n        el.focus();\r\n        var range = el.createTextRange();\r\n        range.collapse(false);\r\n        range.select();\r\n      }\r\n    }\r\n\r\n    function validarCPF(cpf) {\r\n      if (!cpf) {\r\n        return false;\r\n      }\r\n      cpf = cpf.replace(/[^0-9]+/g, '');\r\n      if (cpf == '') return false;\r\n      var rev;\r\n\r\n      // Elimina CPFs invalidos conhecidos\r\n      if (cpf.length != 11 ||\r\n          cpf == \"00000000000\" ||\r\n          cpf == \"11111111111\" ||\r\n          cpf == \"22222222222\" ||\r\n          cpf == \"33333333333\" ||\r\n          cpf == \"44444444444\" ||\r\n          cpf == \"55555555555\" ||\r\n          cpf == \"66666666666\" ||\r\n          cpf == \"77777777777\" ||\r\n          cpf == \"88888888888\" ||\r\n          cpf == \"99999999999\") {\r\n        return false;\r\n      }\r\n      // Valida 1o digito\r\n      var add = 0;\r\n      for (var i = 0; i < 9; i++) {\r\n        add += parseInt(cpf.charAt(i)) * (10 - i);\r\n      }\r\n      rev = 11 - (add % 11);\r\n      if (rev == 10 || rev == 11) {\r\n        rev = 0;\r\n      }\r\n      if (rev != parseInt(cpf.charAt(9))) {\r\n        return false;\r\n      }\r\n      // Valida 2o digito\r\n      add = 0;\r\n      for (var i = 0; i < 10; i++) {\r\n        add += parseInt(cpf.charAt(i)) * (11 - i);\r\n      }\r\n      rev = 11 - (add % 11);\r\n      if (rev == 10 || rev == 11) {\r\n        rev = 0;\r\n      }\r\n      if (rev != parseInt(cpf.charAt(10))) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function formatterCPF(value) {\r\n      if (value) {\r\n        value = value.replace(/[^0-9]/g, \"\");\r\n        value = value.replace(/(\\d{3})(\\d)/, \"$1.$2\");\r\n        value = value.replace(/(\\d{3})(\\d)/, \"$1.$2\");\r\n        value = value.replace(/(\\d{3})(\\d{1,2})$/, \"$1-$2\");\r\n\r\n        return value;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n})(angular);\r\n","(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('telefone', telefone);\r\n\r\n  telefone.$inject = ['$timeout'];\r\n\r\n  function telefone($timeout) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      scope: {\r\n        ngModel: '=ngModel'\r\n      },\r\n      link: function (scope, element, attrs, ngModelCtrl) {\r\n        ngModelCtrl.$setValidity('cpf', true);\r\n\r\n        ngModelCtrl.$formatters.push(function (value) {\r\n          if (value) {\r\n            return maskTelefone(value.substr(0, 11));\r\n          }\r\n          return value;\r\n        });\r\n\r\n        ngModelCtrl.$parsers.push(function (value) {\r\n          if (value) {\r\n            var transformedInput = value.replace(/[^0-9]/g, '');\r\n            $timeout(function () {\r\n              if (ngModelCtrl.$viewValue) {\r\n                $timeout(function () {\r\n                  ngModelCtrl.$setViewValue(maskTelefone(transformedInput.substring(0, 11)));\r\n                });\r\n                setCaretPosition(element[0], ngModelCtrl.$viewValue.length);\r\n              }\r\n            });\r\n\r\n            return value.replace(/[^0-9]/g, \"\");\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    function setCaretPosition(el) {\r\n      if (typeof el.selectionStart == \"number\") {\r\n        el.selectionStart = el.selectionEnd = el.value.length;\r\n      } else if (typeof el.createTextRange != \"undefined\") {\r\n        el.focus();\r\n        var range = el.createTextRange();\r\n        range.collapse(false);\r\n        range.select();\r\n      }\r\n    }\r\n\r\n    function formatterDefault(value) {\r\n      if (value) {\r\n        value = value.replace(/\\D/g, \"\");\r\n        value = value.replace(/^(\\d{2})(\\d)/g, \"($1) $2\");\r\n        value = value.replace(/(\\d)(\\d{4})$/, \"$1-$2\");\r\n\r\n        return value;\r\n      }\r\n    }\r\n\r\n    function formatterNoDdd(value) {\r\n      if (value) {\r\n        value = value.replace(/\\D/g, \"\");\r\n        value = value.replace(/(\\d)(\\d{4})$/, \"$1-$2\");\r\n\r\n        return value;\r\n      }\r\n    }\r\n\r\n    function formatterGeral(value) {\r\n      if (value) {\r\n        value = value.replace(/\\D/g, \"\");\r\n        value = value.replace(/^(\\d{4})(\\d)/, \"$1-$2\");\r\n        value = value.replace(/(\\d)(\\d{4})$/, \"$1-$2\");\r\n\r\n        return value;\r\n      }\r\n    }\r\n\r\n    function maskTelefone(value) {\r\n      if (value) {\r\n        var len = value.replace(/\\D/g, \"\").length;\r\n\r\n        if (len > 9 && len <= 11 && value.indexOf('0800') == -1) {\r\n          return formatterDefault(value);\r\n        } else if (len <= 9) {\r\n          return formatterNoDdd(value);\r\n        }\r\n        if (len == 11 && value.indexOf('0800') > -1) {\r\n          return formatterGeral(value);\r\n        }\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n\r\n})(angular);\r\n"]}