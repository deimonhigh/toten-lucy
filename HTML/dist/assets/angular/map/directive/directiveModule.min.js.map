{"version":3,"sources":["directive/Directives/cpfDirective.js","directive/directiveModule.js","directive/Directives/telefoneDirective.js","directive/Directives/cepDirective.js"],"names":[],"mappingsrVA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ADzFA;AEHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AFvEA;AACA","file":"../../directive/directiveModule.min.js","sourcesContent":["(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('cpf', cpf);\r\n\r\n  cpf.$inject = [];\r\n\r\n  function cpf() {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function (scope, element, attrs, ngModel) {\r\n        var options = {\r\n          onKeyPress: function (cpf, ev, el, op) {\r\n            var masks = ['000.000.000-000', '00.000.000/0000-00'],\r\n                mask  = (cpf.length > 14) ? masks[1] : masks[0];\r\n            el.mask(mask, op);\r\n          }\r\n        }\r\n\r\n        $(element).mask('000.000.000-000', options);\r\n\r\n//        $(element).mask('000.000.000-00', {reverse: true});\r\n\r\n        ngModel.$setValidity('cpf', true);\r\n        ngModel.$setValidity('cnpj', true);\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n          if (value) {\r\n            return value.toString().replace(/[^0-9]/g, '');\r\n          }\r\n        });\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n\r\n          if (value.toString().length > 11) {\r\n            var cond = validarCNPJ(value);\r\n            if (cond) {\r\n              ngModel.$setValidity('cnpj', true);\r\n              ngModel.$setValidity('cpf', true);\r\n              return value;\r\n            } else {\r\n              ngModel.$setValidity('cpf', true);\r\n              ngModel.$setValidity('cnpj', false);\r\n              return undefined;\r\n            }\r\n          } else {\r\n            var cond = validarCPF(value);\r\n            if (cond) {\r\n              ngModel.$setValidity('cpf', true);\r\n              ngModel.$setValidity('cnpj', true);\r\n              return value;\r\n            } else {\r\n              ngModel.$setValidity('cpf', false);\r\n              ngModel.$setValidity('cnpj', true);\r\n              return undefined;\r\n            }\r\n          }\r\n\r\n        });\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n  function validarCPF(cpf) {\r\n    cpf = cpf.replace(/[^\\d]+/g, '');\r\n    if (cpf == '') return false;\r\n    var rev;\r\n\r\n    // Elimina CPFs invalidos conhecidos\r\n    if (cpf.length != 11 ||\r\n        cpf == \"00000000000\" ||\r\n        cpf == \"11111111111\" ||\r\n        cpf == \"22222222222\" ||\r\n        cpf == \"33333333333\" ||\r\n        cpf == \"44444444444\" ||\r\n        cpf == \"55555555555\" ||\r\n        cpf == \"66666666666\" ||\r\n        cpf == \"77777777777\" ||\r\n        cpf == \"88888888888\" ||\r\n        cpf == \"99999999999\") {\r\n      return false;\r\n    }\r\n    // Valida 1o digito\r\n    var add = 0;\r\n    for (var i = 0; i < 9; i++) {\r\n      add += parseInt(cpf.charAt(i)) * (10 - i);\r\n    }\r\n    rev = 11 - (add % 11);\r\n    if (rev == 10 || rev == 11) {\r\n      rev = 0;\r\n    }\r\n    if (rev != parseInt(cpf.charAt(9))) {\r\n      return false;\r\n    }\r\n    // Valida 2o digito\r\n    add = 0;\r\n    for (var i = 0; i < 10; i++) {\r\n      add += parseInt(cpf.charAt(i)) * (11 - i);\r\n    }\r\n    rev = 11 - (add % 11);\r\n    if (rev == 10 || rev == 11) {\r\n      rev = 0;\r\n    }\r\n    if (rev != parseInt(cpf.charAt(10))) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function validarCNPJ(cnpj) {\r\n\r\n    cnpj = cnpj.replace(/[^\\d]+/g, '');\r\n\r\n    if (cnpj == '') return false;\r\n\r\n    if (cnpj.length != 14) {\r\n      return false;\r\n    }\r\n\r\n    // Elimina CNPJs invalidos conhecidos\r\n    if (cnpj == \"00000000000000\" ||\r\n        cnpj == \"11111111111111\" ||\r\n        cnpj == \"22222222222222\" ||\r\n        cnpj == \"33333333333333\" ||\r\n        cnpj == \"44444444444444\" ||\r\n        cnpj == \"55555555555555\" ||\r\n        cnpj == \"66666666666666\" ||\r\n        cnpj == \"77777777777777\" ||\r\n        cnpj == \"88888888888888\" ||\r\n        cnpj == \"99999999999999\") {\r\n      return false;\r\n    }\r\n\r\n    // Valida DVs\r\n    var tamanho = cnpj.length - 2\r\n    var numeros = cnpj.substring(0, tamanho);\r\n    var digitos = cnpj.substring(tamanho);\r\n    var soma = 0;\r\n    var pos = tamanho - 7;\r\n    for (var i = tamanho; i >= 1; i--) {\r\n      soma += numeros.charAt(tamanho - i) * pos--;\r\n      if (pos < 2) {\r\n        pos = 9;\r\n      }\r\n    }\r\n    var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n    if (resultado != digitos.charAt(0)) {\r\n      return false;\r\n    }\r\n\r\n    tamanho = tamanho + 1;\r\n    numeros = cnpj.substring(0, tamanho);\r\n    soma = 0;\r\n    pos = tamanho - 7;\r\n    for (var i = tamanho; i >= 1; i--) {\r\n      soma += numeros.charAt(tamanho - i) * pos--;\r\n      if (pos < 2) {\r\n        pos = 9;\r\n      }\r\n    }\r\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n    if (resultado != digitos.charAt(1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n\r\n  }\r\n})(angular);\r\n","//=require Directives/cpfDirective.js\r\n//=require Directives/telefoneDirective.js\r\n//=require Directives/cepDirective.js\r\n","(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('telefone', telefone);\r\n\r\n  telefone.$inject = [];\r\n\r\n  function telefone() {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function (scope, element, attrs, ngModel) {\r\n        var SPMaskBehavior = function (val) {\r\n              return val.replace(/\\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';\r\n            },\r\n            spOptions      = {\r\n              onKeyPress: function (val, e, field, options) {\r\n                field.mask(SPMaskBehavior.apply({}, arguments), options);\r\n              }\r\n            };\r\n\r\n        $(element).mask(SPMaskBehavior, spOptions);\r\n\r\n        ngModel.$setValidity('telefone', true);\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n          if (value) {\r\n            return value.toString().replace(/[^0-9]/g, '');\r\n          }\r\n        });\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n          if (value && value.length >= 10) {\r\n            ngModel.$setValidity('telefone', true);\r\n            return value;\r\n          } else {\r\n            ngModel.$setValidity('telefone', false);\r\n            return undefined;\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n})(angular);\r\n","(function (angular) {\r\n  \"use strict\";\r\n  angular.module('appToten')\r\n         .directive('cep', cep);\r\n\r\n  cep.$inject = [];\r\n\r\n  function cep() {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function (scope, element, attrs, ngModel) {\r\n        $(element).mask('00000-000', {reverse: true});\r\n\r\n        ngModel.$setValidity('cep', true);\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n          if (value) {\r\n            return value.toString().replace(/[^0-9]/g, '');\r\n          }\r\n        });\r\n\r\n        ngModel.$parsers.push(function (value) {\r\n          if (value && value.length >= 8) {\r\n            ngModel.$setValidity('cep', true);\r\n            return value;\r\n          } else {\r\n            ngModel.$setValidity('cep', false);\r\n            return undefined;\r\n          }\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n})(angular);\r\n"]}