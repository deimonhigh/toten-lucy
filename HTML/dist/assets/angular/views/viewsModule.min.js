(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('loginController', loginController);

  loginController.$inject = ['$scope', '$rootScope', 'apiService', '$state'];

  function loginController($scope, $rootScope, apiService, $state) {
    var vm = $scope;
    var root = $rootScope;

    vm.login = function (dados) {
      apiService
        .token(dados)
        .then(function (res) {
          apiService.setStorage('auth', res);
          tema();
        }, function (err) {
          console.log(err);
          alert('Usuário ou senha inválidos.')
        });
    }

    var tema = function () {
      if (!apiService.getStorage('auth')) {
        tema();
        return;
      }
      apiService
        .get('tema/1')
        .then(function (res) {
          apiService.setStorage('tema', res.result);
          root.$broadcast('temaLoaded');
          $state.go('home');
        }, function (err) {
          alert(err.error);
        });
    };
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('homeController', homeController);

  homeController.$inject = ['$scope', '$rootScope', 'apiService', '$timeout'];

  function homeController($scope, $rootScope, apiService, $timeout) {
    var vm = $scope;
    var root = $rootScope;

  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('carrinhoController', carrinhoController);

  carrinhoController.$inject = ['$scope', '$rootScope', 'apiService', '$timeout'];

  function carrinhoController($scope, $rootScope, apiService, $timeout) {
    var vm = $scope;
    var root = $rootScope;

    vm.listaCompras = apiService.getStorage('carrinho') || [];

    var calcTotal = function () {
      vm.totalProdutos = vm.listaCompras.reduce(function (previousValue, obj) {
        return previousValue + (obj.preco * obj.qnt);
      }, 0);
    };

    vm.removerItem = function (item) {
      vm.listaCompras = vm.listaCompras.filter(function (filtro) {
        return filtro.$$hashKey != item.$$hashKey;
      });

      apiService.setStorage('carrinho', vm.listaCompras);

      calcTotal();
    };

    vm.calcTotalItem = function (item) {
      if (item.qnt.length == 0 || item.qnt == 0) {
        item.qnt = 0;

        vm.removerItem(item)
      }

      calcTotal();
    };

    vm.minus = function (item) {
      if (item.qnt - 1 < 0) {
        item.qnt = 0;
      } else {
        item.qnt -= 1;
      }

      if (item.qnt == 0) {
        vm.removerItem(item);
      }

      helperCarrinho(item, item.qnt);

      calcTotal();
    };

    vm.more = function (item) {
      item.qnt += 1;
      helperCarrinho(item, item.qnt);
      calcTotal();
    };

    var helperCarrinho = function (item, qnt) {
      var exist = vm.listaCompras.filter(function (obj) {
        return obj.codigobarras == item.codigobarras;
      });

      if (exist.length > 0) {
        vm.carrinho = vm.listaCompras.map(function (obj) {
          if (obj.codigobarras) {
            obj.qnt = qnt;
          }
          return obj;
        });
        apiService.setStorage('carrinho', vm.listaCompras);
      } else {
        item.qnt = qnt;
        vm.listaCompras.push(item);
        apiService.setStorage('carrinho', vm.listaCompras);
      }
    };

    calcTotal();
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('fotoController', fotoController);

  fotoController.$inject = ['$scope', '$rootScope', 'apiService'];

  function fotoController($scope, $rootScope, apiService) {
    var vm = $scope;
    var root = $rootScope;

    var _video = null;

    vm.closeModal = function () {
      root.$broadcast('confirmarImg');
      root.foto = false;
      vm.confirmFoto = false;
    };

    vm.okFoto = function () {
      vm.confirmFoto = true;
    };

    vm.notOkFoto = function () {
      vm.confirmFoto = false;
    };

    vm.patOpts = {
      x: 0,
      y: 0,
      w: 400,
      h: 400
    };

    vm.channel = {};

    vm.onError = function (err) {
      console.log(err);
    };

    vm.onSuccess = function () {
      _video = vm.channel.video;
      vm.$apply(function () {
        vm.patOpts.w = _video.width;
        vm.patOpts.h = _video.height;
      });
    };

    vm.makeSnapshot = function () {
      if (_video) {
        var patCanvas = document.querySelector('#snapshot');
        if (!patCanvas) return;
        var ctxPat = patCanvas.getContext('2d');

        var idata = getVideoData(vm.patOpts.x, vm.patOpts.y, vm.patOpts.w, vm.patOpts.h);
        ctxPat.putImageData(idata, 0, 0);

        vm.confirmFoto = true;

        vm.imgResponse = patCanvas.toDataURL();
        apiService.setStorage('comprovante', vm.imgResponse);
      }
    };

    var getVideoData = function getVideoData(x, y, w, h) {
      var hiddenCanvas = document.createElement('canvas');

      hiddenCanvas.width = _video.width;
      hiddenCanvas.height = _video.height;
      var ctx = hiddenCanvas.getContext('2d');
      ctx.drawImage(_video, 0, 0, _video.width, _video.height);
      return ctx.getImageData(x, y, w, h);
    };
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('cadastroController', cadastroController);

  cadastroController.$inject = ['$scope', '$rootScope', 'apiService', 'latinizeService', '$filter', '$state'];

  function cadastroController($scope, $rootScope, apiService, latinizeService, $filter, $state) {
    var vm = $scope;
    var root = $rootScope;

    var enviarParaSalvar = {
      "id": null,
      "documento": null,
      "nome": null,
      "telefone": null,
      "celular": null,
      "enderecos": [],
    }

    vm.dados = {};
    vm.dados.enderecoCerto = true;
    vm.dados.sexo = "M";
    vm.dados.outro = {};

    vm.estados = cidadesEstados.estados.map(function (obj) {
      return {
        "sigla": obj.sigla,
        "nome": obj.nome
      };
    });

    vm.$watch(function ($scope) {
      return $scope.dados.uf;
    }, function (nVal) {
      if (nVal != undefined) {
        vm.procuraCidades(nVal);
      }
    });

    vm.procuraCidades = function (uf) {
      vm.cidades = cidadesEstados.estados.filter(function (obj) {
        return obj.sigla === uf.sigla;
      })[0].cidades.map(function (obj) {
        return {
          "nome": obj,
          "cidade": latinizeService.latinize(obj.toUpperCase())
        };
      });

      root.$broadcast('cidadeLoaded');
    };

    vm.$watch(function ($scope) {
      return $scope.dados.outro.uf;
    }, function (nVal) {
      if (nVal != undefined) {
        vm.procuraCidadesOutro(nVal);
      }
    });

    vm.procuraCidadesOutro = function (uf) {
      vm.cidadesOutro = cidadesEstados.estados.filter(function (obj) {
        return obj.sigla === uf.sigla;
      })[0].cidades.map(function (obj) {
        return {
          "nome": obj,
          "cidade": latinizeService.latinize(obj.toUpperCase())
        };
      });

      root.$broadcast('cidadeLoadedOutro');
    };

    vm.procurarCliente = function (cpf) {
      if (!cpf || cpf.length < 11) {
        return;
      }

      apiService
        .procurar('clientes', cpf)
        .then(function (res) {
          vm.dados.documento = res.result.documento;
          vm.dados.nome = res.result.nome;
          vm.dados.telefone = res.result.telefone;
          vm.dados.celular = res.result.celular;
          vm.dados.id = res.result.id;
          vm.dados.sexo = res.result.sexo;
          vm.dados.email = res.result.email;

          if (res.result.enderecos.length == 1) {
            vm.dados.enderecoCerto = true;
            vm.dados.cep = res.result.enderecos[0].cep;
            vm.dados.numero = res.result.enderecos[0].numero;
            vm.dados.endereco = res.result.enderecos[0].endereco;
            vm.dados.bairro = res.result.enderecos[0].bairro;
            vm.dados.uf = $filter('filter')(vm.estados, {'sigla': res.result.enderecos[0].uf.toUpperCase()}, true)[0];
            vm.dados.cidadeTemp = res.result.enderecos[0].cidade;
          } else {
            vm.dados.enderecoCerto = false;
            res.result.enderecos.map(function (obj) {
              if (obj.enderecooriginal == 1) {
                vm.dados.outro.cep = obj.cep;
                vm.dados.outro.numero = obj.numero;
                vm.dados.outro.endereco = obj.endereco;
                vm.dados.outro.bairro = obj.bairro;
                vm.dados.outro.uf = $filter('filter')(vm.estados, {'sigla': obj.uf.toUpperCase()}, true)[0];
                vm.dados.outro.cidadeTempOutro = obj.cidade;
              } else {
                vm.dados.cep = obj.cep;
                vm.dados.numero = obj.numero;
                vm.dados.endereco = obj.endereco;
                vm.dados.bairro = obj.bairro;
                vm.dados.uf = $filter('filter')(vm.estados, {'sigla': obj.uf.toUpperCase()}, true)[0];
                vm.dados.cidadeTemp = obj.cidade;
              }
            })

          }

        }, function (err) {
//          console.log(err);
        });
    };

    vm.$on('cidadeLoaded', function () {
      if (vm.dados.cidadeTemp) {
        var temp = $filter('filter')(vm.cidades, {'cidade': latinizeService.latinize(vm.dados.cidadeTemp).toUpperCase()}, true);
        vm.dados.cidade = temp && temp[0] ? temp[0] : {};
        delete vm.dados.cidadeTemp;
      }
    });

    vm.$on('cidadeLoadedOutro', function () {
      if (vm.dados.outro.cidadeTempOutro) {
        var tempOutro = $filter('filter')(vm.cidadesOutro, {'cidade': latinizeService.latinize(vm.dados.outro.cidadeTempOutro).toUpperCase()}, true);
        vm.dados.outro.cidade = tempOutro && tempOutro[0] ? tempOutro[0] : {};
        delete vm.dados.outro.cidadeTempOutro;
      }
    });

    vm.salvarDados = function () {
      var enviar = angular.copy(vm.dados);
      enviarParaSalvar.enderecos = [];

      enviarParaSalvar.id = enviar.id;
      enviarParaSalvar.documento = enviar.documento;
      enviarParaSalvar.nome = enviar.nome;
      enviarParaSalvar.telefone = enviar.telefone;
      enviarParaSalvar.celular = enviar.celular;
      enviarParaSalvar.email = enviar.email;
      enviarParaSalvar.sexo = enviar.sexo;

      var endereco1 = {
        "cep": enviar.cep,
        "endereco": enviar.endereco,
        "numero": enviar.numero,
        "bairro": enviar.bairro,
        "uf": enviar.uf.sigla,
        "cidade": enviar.cidade.nome,
        "enderecoOriginal": enviar.enderecoCerto
      };
      enviarParaSalvar.enderecos.push(endereco1);

      if (!enviar.enderecoCerto) {
        var endereco2 = {
          "cep": enviar.outro.cep,
          "endereco": enviar.outro.endereco,
          "numero": enviar.outro.numero,
          "bairro": enviar.outro.bairro,
          "uf": enviar.outro.uf.sigla,
          "cidade": enviar.outro.cidade.nome,
          "enderecoOriginal": !enviar.enderecoCerto
        };

        enviarParaSalvar.enderecos.push(endereco2);
      }

      apiService.post('clientes/save', enviarParaSalvar).then(function (res) {
        apiService.setStorage('cliente', res.result);
        $state.go('pagamento');
      }, function (err) {
//        console.log(err);
      })
    }
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('produtosController', produtosController);

  produtosController.$inject = ['$scope', '$rootScope', 'apiService', '$stateParams', '$state', '$filter'];

  function produtosController($scope, $rootScope, apiService, $stateParams, $state, $filter) {
    var vm = $scope;
    var root = $rootScope;

    if (!$stateParams.categoria) {
      $state.go('categorias');
      return
    }

    vm.menuActive = $stateParams.categoria;

    vm.loading = false;

    vm.categorias = apiService.getStorage('categorias');

    vm.produtoActive = $filter('filter')(vm.categorias, {'id': parseInt(vm.menuActive)}, true)[0].descricao;

    vm.produtos = [];

    var categoriasItem = vm.categorias.filter(function (obj) {
      return obj.id == $stateParams.categoria
    })[0];

    if (categoriasItem.categorias) {
      var itensDoFiltro = categoriasItem.categorias.map(function (obj) {
        return obj.codigocategoria;
      })

      var filtro = {
        "itens": itensDoFiltro
      }

      apiService.post('produtos/filtro', filtro).then(function (res) {
        vm.loading = true;
        vm.produtos = res.result;
      });

    }
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('produtoController', produtoController);

  produtoController.$inject = ['$scope', '$rootScope', 'apiService', '$state', '$stateParams'];

  function produtoController($scope, $rootScope, apiService, $state, $stateParams) {
    var vm = $scope;
    var root = $rootScope;

    vm.qnt = 1;
    vm.produtosRelacionados = [];

    vm.carrinho = apiService.getStorage('carrinho') || [];
    vm.produto = {};
    vm.temasItem = apiService.getStorage('tema');

    apiService.get('produtos/' + $stateParams.id).then(function (res) {
      vm.produto = res.result;
      vm.imagemGrande = vm.produto.imagens[0];

      apiService.post('produtos/relacionados', {
        "produtocodigo": vm.produto.codigoproduto
      }).then(function (res) {
        vm.produtosRelacionados = res.result;
      }, function (err) {
        alert(err.error);
      });

    }, function (err) {
      alert(err.error);
    })

    vm.minus = function () {
      if (vm.qnt - 1 < 0) {
        vm.qnt = 0;
      } else {
        vm.qnt -= 1;
      }

      if (vm.qnt == 0) {
        vm.removerItem(item);
      }
    };

    vm.more = function () {
      vm.qnt += 1;
    };

    vm.selectColor = function (item) {
      vm.cores.map(function (obj) {
        obj.selected = false;
      });

      item.selected = true;
    };

    vm.changeImg = function (item) {
      vm.imagemGrande = item;
    }

    vm.addCarrinho = function (item) {
      var exist = vm.carrinho.filter(function (obj) {
        return obj.codigobarras == item.codigobarras;
      });

      if (exist.length > 0) {
        vm.carrinho = vm.carrinho.map(function (obj) {
          if (obj.codigobarras) {
            obj.qnt = vm.qnt;
          }
          return obj;
        });
        apiService.setStorage('carrinho', vm.carrinho);
      } else {
        item.qnt = vm.qnt;
        vm.carrinho.push(item);
        apiService.setStorage('carrinho', vm.carrinho);
      }
      $state.go('carrinho');
    };
  };

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('pagamentoController', pagamentoController);

  pagamentoController.$inject = ['$scope', '$rootScope', 'apiService', '$state', '$timeout'];

  function pagamentoController($scope, $rootScope, apiService, $state, $timeout) {
    var vm = $scope;
    var root = $rootScope;
    vm.dadosVendedor = {};
    vm.formaPagamento = {};
    vm.editarPagamentoFlag = false;
    vm.cliente = apiService.getStorage('cliente');
    vm.formaPagamentoStorage = apiService.getStorage('formaPagamento');
    vm.comprovante = apiService.getStorage('comprovante');

    var getComprovante = function () {
      $timeout(function () {
        vm.comprovante = apiService.getStorage('comprovante');
      });

      if (!vm.comprovante) {
        getComprovante();
      }
    };

    vm.listaCompras = apiService.getStorage('carrinho') || [];

    vm.totalCarrinho = vm.listaCompras.reduce(function (previousValue, obj) {
      return previousValue + (obj.preco * obj.qnt);
    }, 0);

    var padLeft = function (nr, n, str) {
      return Array(n - String(nr).length + 1).join(str || '0') + nr;
    };

    vm.idPedido = 'SF' + padLeft(vm.cliente.idPedido, 13).replace(/^(\d{4})(\d{4})(\d+)(\d{2})/, '$1.$2.$3-$4');

    vm.validarVendedor = function () {
      var enviar = {};
      apiService.delStorage('comprovante');
      enviar.identificacao = vm.dadosVendedor.identificacao;
      enviar.senha = vm.dadosVendedor.senha;
      apiService.post('vendedores/validate', enviar).then(function (res) {
        $state.go('finalizacao');
        root.openFoto();
      }, function (err) {
        alert(err.error);
      })
    };

    vm.limparSessao = function () {
      apiService.delStorage('comprovante');
      apiService.delStorage('cliente');
      apiService.delStorage('carrinho');
    };

    vm.editarPagamento = function () {
      vm.editarPagamentoFlag = !vm.editarPagamentoFlag;

      apiService.setStorage('formaPagamento', vm.formaPagamento);
      
      if (vm.editarPagamentoFlag && vm.formaPagamento.total) {
        $timeout(function () {
          vm.totalCarrinho = vm.formaPagamento.total;
        });
      }
    };

    vm.$on('confirmarImg', function () {
      var formaPagamento = apiService.getStorage('formaPagamento');
      vm.comprovante = apiService.getStorage('comprovante');
      vm.cliente = apiService.getStorage('cliente');

      var send = {};
      send.idcliente = vm.cliente.id;
      send.total = vm.formaPagamentoStorage.total;
      send.idPedido = vm.cliente.idPedido;
      send.img = vm.comprovante;

      send.produtos = vm.listaCompras.map(function (obj) {
        return {
          "produto_id": obj.id,
          "codigoproduto": obj.codigoproduto,
          "qnt": obj.qnt,
          "preco": obj.preco,
        };
      });

      send.parcelas = formaPagamento.parcelas;
      send.aVista = formaPagamento.aVista;

      apiService.post('pedidos/save', send).then(function (res) {
        
      }, function (err) {
        console.log(err);
        $state.go('carrinho');
        alert('Pedido não concluída, tente novamente!');
      })
    });

    var comJurosAVista = vm.totalCarrinho + vm.totalCarrinho * (root.temaStorage['parcela0'] / 100);
    vm.listaPagamentos = [
      {
        "index": 0,
        "parcelas": 0,
        "aVista": true,
        "descricao": 'À vista | R$ ' + comJurosAVista.toFixed(2).replace('.', ','),
        "total": comJurosAVista
      }
    ];

    for (var i = 1; i < 13; i++) {
      var comJuros = vm.totalCarrinho + vm.totalCarrinho * (root.temaStorage['parcela' + i] / 100);
      var pagamento = {
        "index": i + 1,
        "parcelas": i,
        "aVista": false,
        "descricao": 'Cartão de crédito | ' + i + 'x de R$ ' + (comJuros / i).toFixed(2).replace('.', ','),
        "total": comJuros
      };

      vm.listaPagamentos.push(pagamento);
    }
  }

})
(angular);
(function (angular) {
  "use strict";
  angular.module('appToten')
         .controller('categoriaController', categoriaController);

  categoriaController.$inject = ['$scope', '$rootScope', 'apiService'];

  function categoriaController($scope, $rootScope, apiService) {
    var vm = $scope;
    var root = $rootScope;

    vm.categorias = [];

    apiService.get('categorias').then(function (res) {
      apiService.setStorage('categorias', res.result);
      vm.categorias = res.result;
    });

  }

})
(angular);
//# sourceMappingURL=../map/views/viewsModule.min.js.map
