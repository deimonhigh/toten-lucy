(function (angular) {
  angular
    .module("appToten")
    .factory('autenticacaoInterceptor', autenticacaoInterceptor);

  autenticacaoInterceptor.$inject = ['$q', '$state', '$injector'];

  function autenticacaoInterceptor($q, $state, $injector) {
    return {
      request: function (requisicao) {
        var api = $injector.get('apiService');
        var autorizacaoDados = api.getStorage('auth');
        if (requisicao.url.indexOf('.html') === -1 && requisicao.url.indexOf("api") > -1 && autorizacaoDados.access_token) {
          requisicao.headers["Authorization"] = "Bearer " + autorizacaoDados.access_token;
        }

        return requisicao || $q.when(requisicao);
      },
      response: function (response) {
        if (response.status === 401) {
          var api = $injector.get('apiService');
          api.clearStorage();
          return $q.reject(response);
        }
        if ([404, 500, 400].indexOf(response.status) > -1) {
          return $q.reject(response);
        }
        return response || $q.when(response);
      }
    }
  }

})(angular);
(function (angular) {
  angular
    .module("appToten")
    .factory('errorInterceptor', errorInterceptor);

  errorInterceptor.$inject = ['$q', '$state', '$injector'];
  function errorInterceptor($q, $state, $injector) {
    return {
      responseError: function (rejection) {
        if (rejection.status === 401) {
          var api = $injector.get('apiService');
          api.clearStorage();
          $state.go("login");
        }
        return $q.reject(rejection);
      }
    }
  }

})(angular);

(function (angular) {
  angular
    .module("appToten")
    .config([
              '$httpProvider',
              function ($httpProvider) {
                $httpProvider.interceptors.push("autenticacaoInterceptor");
                $httpProvider.interceptors.push("errorInterceptor");
              }
            ]);
})(angular);


angular
  .module("appToten")
  .constant("config", {
    "baseUrl": "https://lojadalucy.com.br/",
    "apiToken": "https://lojadalucy.com.br/oauth/token",
    "apiUrl": "https://lojadalucy.com.br/api/",
    "baseUrlDev": "http://toten.localhost/",
    "apiTokenDev": "http://toten.localhost/oauth/token",
    "apiUrlDev": "http://toten.localhost/api/",
    "grant_type": "password",
    "client_id": 3,
    "client_secret": "aw8AFIdfQ280GTnGjnJGHJGRc6lZpop1Pz3xhOj3",
    "client_secret_dev": "5cXW4MSqOVsqsMmhtCc6oRcNc25bbIeIopYr0biU",
    "scope": "*",
    "dev": false
  });

angular
  .module("appToten")
  .config([
            "$provide",
            function ($provide) {
              $provide.decorator("$q",
                                 [
                                   "$delegate",
                                   function ($delegate) {
                                     //Helper method copied from q.js.
                                     var isPromiseLike = function (obj) { return obj && angular.isFunction(obj.then); }

                                     /*
                                      * @description Execute a collection of tasks serially.  A task is a function that returns a promise
                                      *
                                      * @param {Array.<Function>|Object.<Function>} tasks An array or hash of tasks.  A tasks is a function
                                      *   that returns a promise.  You can also provide a collection of objects with a success tasks, failure task, and/or notify function
                                      * @returns {Promise} Returns a single promise that will be resolved or rejected when the last task
                                      *   has been resolved or rejected.
                                      */
                                     function serial(tasks) {
                                       //Fake a "previous task" for our initial iteration
                                       var prevPromise;
                                       var error = new Error();
                                       angular.forEach(tasks, function (task, key) {
                                         var success = task.success || task;
                                         var fail = task.fail;
                                         var notify = task.notify;
                                         var nextPromise;

                                         //First task
                                         if (!prevPromise) {
                                           nextPromise = success();
                                           if (!isPromiseLike(nextPromise)) {
                                             error.message = "Task " + key + " did not return a promise.";
                                             throw error;
                                           }
                                         } else {
                                           //Wait until the previous promise has resolved or rejected to execute the next task
                                           nextPromise = prevPromise.then(
                                             /*success*/function (data) {
                                               if (!success) { return data; }
                                               var ret = success(data);
                                               if (!isPromiseLike(ret)) {
                                                 error.message = "Task " + key + " did not return a promise.";
                                                 throw error;
                                               }
                                               return ret;
                                             },
                                             /*failure*/function (reason) {
                                               if (!fail) { return $delegate.reject(reason); }
                                               var ret = fail(reason);
                                               if (!isPromiseLike(ret)) {
                                                 error.message = "Fail for task " + key + " did not return a promise.";
                                                 throw error;
                                               }
                                               return ret;
                                             },
                                             notify);
                                         }
                                         prevPromise = nextPromise;
                                       });

                                       return prevPromise || $delegate.when();
                                     }

                                     $delegate.serial = serial;
                                     return $delegate;
                                   }
                                 ]);
            }
          ]);
(function () {
  "use strict";

  angular.module('appToten').config(routeFn);

  routeFn.$inject = ['$stateProvider', '$urlRouterProvider', 'localStorageServiceProvider', 'cfpLoadingBarProvider'];

  function routeFn($stateProvider, $urlRouterProvider, localStorageServiceProvider, cfpLoadingBarProvider) {
    cfpLoadingBarProvider.includeSpinner = false;

    localStorageServiceProvider
      .setPrefix('appToten')
      .setStorageType('sessionStorage');

    $urlRouterProvider.otherwise('/');

    $stateProvider
      .state("erro", {
        url: "/404",
        templateUrl: "./views/404.html"
      })

      .state("home", {
        url: "/home",
        templateUrl: "./views/home.html",
        resolve: {
          deleteStorage: [
            'apiService',
            '$timeout',
            function (apiService, $timeout) {
              apiService.delStorage('comprovante');
              apiService.delStorage('cliente');
              apiService.delStorage('carrinho');
              apiService.delStorage('formaPagamento');
              apiService.delStorage('comprovanteCodigos');
              apiService.delStorage('vendedor');
              apiService.delStorage('frete');
              apiService.delStorage('boleto');
              $timeout(function () {
                root.itensCarrinho = 0;
              });
            }
          ]
        }
      })

      .state("login", {
        url: "/",
        templateUrl: "./views/login.html",
        controller: "loginController"
      })

      .state("categorias", {
        url: "/categorias",
        templateUrl: "./views/categorias.html",
        controller: "categoriaController"
      })

      .state("carrinho", {
        url: "/meuCarrinho",
        templateUrl: "./views/carrinho.html",
        controller: "carrinhoController"
      })

      .state("cadastro", {
        url: "/cadastro",
        templateUrl: "./views/cadastro.html",
        controller: "cadastroController"
      })

      .state("produtos", {
        url: "/produtos/:categoria",
        templateUrl: "./views/produtos.html",
        controller: "produtosController"
      })

      .state("produto", {
        url: "/produto/:id",
        templateUrl: "./views/produto.html",
        controller: "produtoController"
      })

      .state("pagamento", {
        url: "/pagamento",
        templateUrl: "./views/pagamento.html",
        controller: "pagamentoController"
      })

      .state("pagamentoMP", {
        url: "/pagamento/mp",
        templateUrl: "./views/pagamento_mp.html",
        controller: "pagamentoMpController"
      })

      .state("finalizacao", {
        url: "/finalizacao",
        templateUrl: "./views/finalizacao.html",
        controller: "finalizacaoController"
      });
  }
})(angular);


//# sourceMappingURL=../map/config/configModule.min.js.map
